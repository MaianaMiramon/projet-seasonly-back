security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Member
                property: pseudo
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login_api:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: app.api_authentication_success_handler
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            jwt: ~
            logout:
                path: app_api_logout
                target: /api/  # Redirection après la déconnexion de l'API
        main:
            lazy: true
            provider: app_user_provider
            logout:
                path: app_back_logout
                target: app_back_login
            form_login:
                # "app_back_login" route de connexion back et redirection vers l'accueil
                login_path: app_back_login
                check_path: app_back_login
                default_target_path: /back/
        
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    encoders:
        # use your user class name here
        App\Entity\User:
            # Use native password encoder
            # This value auto-selects the best possible hashing algorithm
            # (i.e. Sodium when available).
            algorithm: auto

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/logout, roles: [ROLE_MEMBER] }
        - { path: ^/api/member/add, roles: PUBLIC_ACCESS }
        - { path: ^/api/favorite, roles: [ROLE_MEMBER] }
        - { path: ^/api/favorite/delete/\d+, roles: [ROLE_MEMBER] }
        - { path: ^/api/favorite/add/\d+, roles: [ROLE_MEMBER] }
        - { path: ^/api/member, roles: [ROLE_MEMBER] }
        - { path: ^/api/member/\d+, roles: [ROLE_MEMBER] }
        - { path: ^/api, roles: PUBLIC_ACCESS }
        - { path: ^/back/login, roles: PUBLIC_ACCESS }
        - { path: ^/back/logout, roles: [ROLE_ADMIN] }
        - { path: ^/back, roles: [ROLE_ADMIN] }

    role_hierarchy:
        ROLE_MEMBER: ROLE_USER
        ROLE_ADMIN: ROLE_MEMBER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon